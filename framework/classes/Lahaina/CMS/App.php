<?phpnamespace Lahaina\CMS;use \ErrorException;use \Exception;use \InvalidArgumentException;use \Lahaina\CMS\Handler\Config;use \Lahaina\CMS\Handler\Router;use \Lahaina\CMS\Handler\Translator;use \Lahaina\CMS\Mapper\SettingMapper;class App extends \Lahaina\Framework\App{    /**     * Initialize app.     *     * @param string $path     */    protected function initialize($path)    {        parent::initialize($path);        // Register CMS settings        $settingMapper = new SettingMapper();        $setting = $settingMapper->findById(1);        if ($setting) {            $setting->setReadOnly();            $this->set('setting', $setting);        } else {            throw new Exception('Settings not found');        }    }    /**     * Create and set config.     *     * @param string $path Absolute path to config file     *     * @throws InvalidArgumentException     */    protected function setConfig($path)    {        $configFilePath = $path . '/config.php';        if (!is_file($configFilePath)) {            throw new InvalidArgumentException('Config file not found: ' . $configFilePath);        }        $configData = include $configFilePath;        $config = new Config($configData, false, true);        $config->set('path', $path);        $this->set('config', $config);    }    /**     * Create and set router.     */    protected function setRouter()    {        $this->set('router', new Router($this));    }    /**     * Create and set translator.     */    protected function setTranslator()    {        $this->set('translator', new Translator($this));    }    /**     * Error handler.     *     * @param int    $errno     * @param string $errstr     * @param string $errfile     * @param string $errline     * @param array  $errcontext     *     * @throws ErrorException     */    public function errorHandler($errno, $errstr, $errfile, $errline)    {        $ex = new ErrorException($errstr, 0, $errno, $errfile, $errline);        parent::exceptionHandler($ex);    }    /**     * Exception handler.     *     * @param Exception $ex     */    public function exceptionHandler($ex)    {        while (ob_get_level() > 1) {            ob_end_clean();        }        $this->get('logger')->logException($ex);        try {            $router = $this->get('router');            $errorRoute = $router->getRouteByKey('frontend_error');            $router->route($errorRoute, array($ex))->send();        } catch (Exception $ex) {            parent::exceptionHandler($ex);        }    }}