<?phpnamespace Neoflow\CMS\Controller\Backend;use \Neoflow\CMS\Controller\BackendController;use \Neoflow\CMS\Model\PageModel;use \Neoflow\CMS\Model\PermissionModel;use \Neoflow\CMS\Model\RoleModel;use \Neoflow\Framework\Handler\Validation\ValidationException;use \Neoflow\Framework\Handler\Validation\ValidationHelper;use \Neoflow\Framework\HTTP\Responsing\Response;use \Neoflow\Helper\Alert\DangerAlert;use \Neoflow\Helper\Alert\SuccessAlert;class RoleController extends BackendController{    /**     * Constructor     */    public function __construct()    {        parent::__construct();        $this->view            ->setTitle('Accounts')            ->setSubtitle('Roles');    }    /**     * Index action     *     * @param array $args     * @return Response     */    public function indexAction($args)    {        // Get permissions        $permissions = PermissionModel::findAll();        // Get roles        $roles = RoleModel::orm()            ->where('role_id', '!=', 1)            ->fetchAll()            ->map(function($role) {            // Set translated titles of permissions            $role->permission_titles = $role->permissions()->fetchAll()->implode(function($role) {                return $role->getTranslatedTitle();            });            return $role;        });        return $this->render('backend/role/index', array(                'permissions' => $permissions,                'roles' => $roles        ));    }    /**     * Create role action     *     * @param array $args     * @return Response     */    public function createAction($args)    {        try {            // Get post data            $postData = $this->getRequest()->getPostData();            // Create role            $role = RoleModel::create(array(                    'title' => $postData->get('title'),                    'description' => $postData->get('description'),                    'permission_ids' => $postData->get('permission_ids')            ));            if ($role) {                $this->setFlash('alert', new SuccessAlert('{0} successful created', array('Role')));            } else {                $this->setFlash('alert', new DangerAlert('Create failed'));            }        } catch (ValidationException $ex) {            $this->setFlash('alert', new DangerAlert($ex->getErrors()));        }        return $this->redirectToRoute('role_index');    }    public function editAction($args)    {        // Create validation helper        $validationHelper = new ValidationHelper();        // Get role if validation has failed        if ($validationHelper->hasError()) {            $data = $validationHelper->getData();            $role = new RoleModel($data);        } else {            // Get role by id            $role = $this->getRoleById($args['id']);        }        // Set ids of role permissions        $role->permission_ids = $role            ->permissions()            ->fetchAll()            ->map(function($rolePermission) {            return $rolePermission->id();        }, true);        // Get permissions        $permissions = PermissionModel::findAll();        // Set back url        $this->view->setBackRoute('role_index');        return $this->render('backend/role/edit', array(                'role' => $role,                'permissions' => $permissions,        ));    }    public function updateAction($args)    {        try {            // Get post data            $postData = $this->getRequest()->getPostData();            // Get role by id            $role = $this->getRoleById($postData->get('role_id'));            // Update role            $role->title = $postData->get('title');            $role->description = $postData->get('description');            $role->permission_ids = $postData->get('permission_ids');            // Save role            if ($role->save()) {                $this->setFlash('alert', new SuccessAlert('{0} successful updated', array('Role')));            } else {                $this->setFlash('alert', new DangerAlert('Update failed'));            }        } catch (ValidationException $ex) {            $this->setFlash('alert', new DangerAlert($ex->getErrors()));        }        return $this->redirectToRoute('role_edit', array('id' => $role->id()));    }    public function deleteAction($args)    {        // Get role by id        $role = $this->getRoleById($args['id']);        // Delete role        if ($role->delete()) {            $this->setFlash('alert', new SuccessAlert('{0} successful deleted', array('Role')));        } else {            $this->setFlash('alert', new DangerAlert('Delete failed'));        }        return $this->redirectToRoute('role_index');    }    protected function getRoleById($id)    {        // Get role by id        $role = RoleModel::findById($id);        if ($role) {            return $role;        }        throw new Exception('Role not found');    }}