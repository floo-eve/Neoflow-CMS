<?phpnamespace Neoflow\CMS\Controller\Backend;use Neoflow\CMS\Controller\BackendController;use Neoflow\CMS\Mapper\LanguageMapper;use Neoflow\CMS\Mapper\SettingMapper;use Neoflow\CMS\Mapper\ThemeMapper;use Neoflow\CMS\Model\SettingModel;use Neoflow\Framework\HTTP\Responsing\Response;use Neoflow\Helper\Alert\DangerAlert;use Neoflow\Helper\Alert\SuccessAlert;use Neoflow\Framework\Handler\Validation\ValidationException;use Neoflow\Framework\Handler\Validation\ValidationHelper;class SettingController extends BackendController{    /**     * @var LanguageMapper     */    protected $languageMapper;    /**     * @var SettingMapper     */    protected $settingMapper;    /**     * @var ThemeMapper     */    protected $themeMapper;    /**     * Constructor     */    public function __construct()    {        parent::__construct();        $this->view->setTitle('Settings');        // Create mapper        $this->settingMapper = new SettingMapper();        $this->languageMapper = new LanguageMapper();        $this->themeMapper = new ThemeMapper();    }    /**     * Index action     *     * @param array $args     * @return Response     */    public function indexAction($args)    {        // Create helper        $validationHelper = new ValidationHelper();        // Get setting entity (from database or self-made if validation has failed)        if ($validationHelper->hasError()) {            $data = $validationHelper->getData();            $setting = new SettingModel($data);        } else {            $setting = $this->settingMapper->findById(1);        }        // Get additional model entities        $languages = $this->languageMapper->findAll();        $themes = $this->themeMapper->findAll();        return $this->render('backend/setting/index', array(                'setting' => $setting,                'languages' => $languages,                'themes' => $themes,        ));    }    /**     * Save action     *     * @param array $args     * @return Response     */    public function saveAction($args)    {        // Get post data        $postData = $this->getRequest()->getPostData();        $settingPostData = $postData->get('setting');        $languagePostData = $settingPostData->get('language');        // Get model entities        $setting = $this->settingMapper->findById(1);        $languages = $this->languageMapper->findAll();        try {            // Save setting            $setting->language_id = $settingPostData->get('language_id');            $setting->website_title = $settingPostData->get('website_title');            $setting->website_description = $settingPostData->get('website_description');            $setting->keywords = $settingPostData->get('keywords');            $setting->author = $settingPostData->get('author');            $setting->theme_id = $settingPostData->get('theme_id');            $setting->backend_theme_id = $settingPostData->get('backend_theme_id');            $setting->save();            // Save active languages            $activeLanguageIds = $languagePostData->get('active_language_ids');            foreach ($languages as $language) {                $language->is_active = false;                if ($setting->language_id === $language->id() || in_array($language->id(), $activeLanguageIds)) {                    $language->is_active = true;                }                $language->save();            }        } catch (ValidationException $ex) {            // Fallback if validation fails            $this->getSession()                ->setFlash('alert', new DangerAlert($ex->getErrors()));            return $this->redirectToRoute('setting_index');        }        $this->getSession()            ->setFlash('alert', new SuccessAlert('Successful saved'));        return $this->redirectToRoute('setting_index');    }}