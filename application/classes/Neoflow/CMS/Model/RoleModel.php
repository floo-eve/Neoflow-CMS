<?phpnamespace Neoflow\CMS\Model;use Neoflow\Framework\ORM\AbstractEntityModel;class RoleModel extends AbstractEntityModel{    /**     * @var string     */    public static $tableName = 'roles';    /**     * @var string     */    public static $primaryKey = 'role_id';    /**     * @var array     */    public static $properties = ['role_id', 'title', 'description'];    public function permissions()    {        return $this->hasManyThrough('\\Neoflow\\CMS\\Model\\PermissionModel', '\\Neoflow\\CMS\\Model\\RolePermissionModel', 'role_id', 'permission_id');    }    /**     * Validate setting entity     *     * @return bool     */    public function validate()    {        $validator = new \Neoflow\Framework\Handler\Validation\Validator($this->toArray());        $validator            ->required()            ->betweenLength(3, 50)            ->callback(function($title, $role) {                $roles = RoleModel::repo()                    ->where('title', '=', $title)                    ->where('role_id', '!=', $role->id())                    ->fetchAll();                return (count($roles) === 0);            }, '{0} has to be unique', array($this))            ->set('title', 'Title');        $validator            ->required()            ->set('visibility', 'Visibility');        return $validator->validate();    }    public function save($validate = true)    {        if ($this->id() != 1 && parent::save($validate)) {            $rolePermissions = RolePermissionModel::findAllByColumn('role_id', $this->id());            $rolePermissions->delete();            if ($this->permission_ids) {                foreach ($this->permission_ids as $permission_id) {                    RolePermissionModel::create(array(                        'role_id' => $this->id(),                        'permission_id' => $permission_id                    ));                }            }            return true;        }        return false;    }    public function delete()    {        if ($this->id() != 1) {            $rolePermissions = RolePermissionModel::findAllByColumn('role_id', $this->id());            if ($rolePermissions->delete()) {                return parent::delete();            }        }        return false;    }    public function getPermissionTitles($seperator = ', ')    {        $permissions = $this->permissions()->fetchAll();        return $permissions->implode(function($role) {                return $role->getTranslatedTitle();            }, $seperator);    }}